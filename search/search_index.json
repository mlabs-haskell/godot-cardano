{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cardano Game Engine Wallet - Godot Integration","text":"<p>Cardano Game Engine Wallet is an integrated light wallet and off-chain SDK for the Godot engine and Cardano blockchain. The project is currently a work-in-progress.</p> <p>This project was publicly funded by the Cardano community in round 10 of Project Catalyst. Thank you for your support!</p>"},{"location":"#status","title":"Status","text":"<p>The project currently consists of a small demo that showcases two features:</p> <ul> <li>Generating / importing a wallet by entering a seed-phrase</li> <li>Transferring ADA to an arbitrary Cardano address.</li> </ul> <p>At the momment, the demo runs on the preview testnet and was tested on Linux and Windows x86-64 PCs.</p>"},{"location":"#how-to-build-and-run-the-demo-with-godot","title":"How to build and run the demo with Godot","text":""},{"location":"#pre-requisites","title":"Pre-requisites","text":"<ul> <li> <p>Godot Engine 4.2: The demo runs on version 4.2 of the Godot engine, which you   can download at the official website.</p> </li> <li> <p>A wallet with funds in the Cardano preview testnet: You can use any wallet you like, as   long as it supports the preview testnet. Take note of the seed-phrase of your wallet. To get test ADA (tADA), use the Cardano testnet faucet.</p> </li> <li> <p>A Blockfrost token: Our demo uses Blockfrost as a provider for querying the blockchain and submitting transactions. You will need a Blockfrost account and a preview testnet token.</p> </li> </ul>"},{"location":"#setup","title":"Setup","text":"<p>First, clone the repository and enter the top directory.</p> <pre><code>$ git clone https://github.com/mlabs-haskell/godot-cardano.git\n$ cd godot-cardano\n</code></pre> <p>Download <code>godot-cardano.zip</code> from the releases page, unzip it and copy the <code>addons</code> folder into the <code>demo</code> folder of the repo.</p> <pre><code>$ curl https://github.com/mlabs-haskell/godot-cardano/releases/download/release-.../godot-cardano.zip -O godot-cardano.zip\n$ unzip godot-cardano.zip -o demo\n</code></pre> <p>Inside the <code>demo</code> folder, create a \"preview_token.txt\" file with your Blockfrost preview token.</p> <pre><code>$ echo \"&lt;YOUR TOKEN&gt;\" &gt; demo/preview_token.txt\n</code></pre> <p>Open the Godot editor. You will be greeted by the Project Manager. Import and open the project located in the <code>demo</code> folder.</p> <p></p> <p></p> <p>You should now have the Godot editor window with the project loaded. Press the button for running the current scene (or press <code>F5</code>).</p> <p></p>"},{"location":"#how-the-demo-works","title":"How the demo works","text":"<p>The demo consists of two forms:</p> <ol> <li>A form for filling in the wallet's mnemonic phrase</li> <li>A form for transferring ADA to an arbitrary address</li> </ol> <p>The two forms must be filled in sequence.</p> <ol> <li> <p>First fill in the seed phrase of the wallet specified in the Pre-requisites section.</p> </li> <li> <p>Click on \"Set wallet\". If the wallet is loaded correctly, the demo should inform you of the amount of UTxOs found in the address associated to that wallet (as well as the amount of funds in it).</p> </li> <li> <p>Set the recipient address of the transaction (you may use the address of your wallet if you want).</p> </li> <li> <p>Fill in the amount of lovelace to send. A reminder that lovelace is the smallest unit of ADA currency: 1 ADA = 1,000,000 lovelace. You should send at least 969,750. This is the smallest value a UTxO may have in Cardano, any less will trigger a runtime error.</p> </li> <li> <p>Click on \"Send ADA\". This will use the Blockfrost backend to submit the transaction to the Cardano blockchain.</p> </li> </ol> <p></p> <p>At this point the demo is over. The demo will not inform you of the success of the transaction, but you may use any tool to confirm that a transaction occurred between your wallet and the recipient.</p> <p>For instance, here we use Cardanoscan (Preview) to monitor the wallet address and confirm that a transaction occurred:</p> <p></p>"},{"location":"#whats-next","title":"What's next?","text":"<p>Check our milestones here!</p> <p>You may also read our Proof Of Achievement / Research report written for the milestone as well. This document discusses our work and rationale for the technical decisions we have made.</p>"},{"location":"#development","title":"Development","text":"<p>Development is supported on linux. On other platforms, use a virtual machine or WSL. To get started, clone the repo and enter it.</p>"},{"location":"#setup_1","title":"Setup","text":"<p>Install Nix and enable flakes, or do it in one step with the Determinate nix installer.</p>"},{"location":"#build-asset","title":"Build Asset","text":"<pre><code>$ nix build .#godot-cardano\n</code></pre>"},{"location":"#build-and-run-demo","title":"Build and Run Demo","text":"<pre><code>$ nix build .#demo\n$ nix run .#steam-run result/bin/demo\n</code></pre>"},{"location":"#run-integration-test-on-preview-network","title":"Run Integration Test on preview network","text":"<p>Before running the tests, ensure that <code>test/preview_token.txt</code> is populated with a valid Blockfrost preview key, and that <code>test/seed_phrase.txt</code> is populated with a valid 24-word seed phrase and the address is funded with testnet ADA from the faucet. Alternatively, your seed phrase can be set via the <code>TESTNET_SEED_PHRASE</code> environment variable. The address used will be the default address in most light wallets, as well as in the demo app provided with this project. Once these are set, run the test suite:</p> <p>Run integration test on preview network.</p> <pre><code>$ nix run .#preview-integration-test\n</code></pre>"},{"location":"#development-shell","title":"Development shell","text":"<p>Enter development shell with all dependencies in PATH and addons linked. A list of useful commands is displayed.</p> <pre><code>$ nix develop\n\ud83d\udd28 Welcome to godot-cardano devshell\n\n[[general commands]]\ncardano-cli - The Cardano command-line interface\n\n...\n</code></pre> <p>Here are some useful workflows inside the development shell:</p>"},{"location":"#build-the-godot-extension","title":"Build the Godot extension","text":"<pre><code>$ cd libcsl_godot\n$ cargo build\n$ ls target/debug/libcsl_godot.so\n$ ls -la ../addons/@mlabs-haskell/godot-cardano/bin/\n</code></pre>"},{"location":"#open-the-demo-app-in-godot-editor","title":"Open the demo app in Godot editor","text":"<pre><code>$ cd demo\n$ echo \"&lt;your bockfrost preview token&gt;\" &gt; preview_token.txt\n$ godot4 --editor\n</code></pre> <p>With the <code>demo</code> or <code>test</code> project open, the Godot editor should automatically reload the gdextension after <code>cargo build</code>.</p>"},{"location":"#export-and-run-the-demo","title":"Export and run the demo","text":"<pre><code>$ cd demo\n$ godot4 --headless --export-debug  \"Linux/X11\" out/demo project.godot\n$ steam-run out/demo\n</code></pre>"},{"location":"#run-integration-tests-on-preview-network","title":"Run integration tests on preview network","text":"<pre><code>$ cd test\n$ godot4 --headless --script addons/gut/gut_cmdln.gd\n</code></pre>"},{"location":"#start-private-testnet-and-fund-wallet","title":"Start private testnet and fund wallet","text":"<pre><code>$ overmind start -D\n$ private-testnet-fund-ada\n$ echo $PRIVATE_TESTNET_PAYMENT_ADDRESS\n$ echo $PRIVATE_TESTNET_PAYMENT_VKEY\n$ echo $PRIVATE_TESTNET_PAYMENT_SKEY\n$ overmind quit\n</code></pre>"}]}