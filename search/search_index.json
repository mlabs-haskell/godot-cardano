{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cardano Game Engine Wallet - Godot Integration","text":"<p>Cardano Game Engine Wallet is an integrated light wallet and off-chain SDK for the Godot engine and Cardano blockchain. The project is currently a work-in-progress.</p> <p>This project was publicly funded by the Cardano community in round 10 of Project Catalyst. Thank you for your support!</p>"},{"location":"#status","title":"Status","text":"<p>The project currently consists of a small demo that showcases two features:</p> <ul> <li>Generating / importing a wallet by entering a seed-phrase</li> <li>Transferring ADA to an arbitrary Cardano address.</li> </ul> <p>At the momment, the demo runs on the preview testnet and was tested on Linux and Windows x86-64 PCs.</p>"},{"location":"#how-to-build-and-run-the-demo-with-godot","title":"How to build and run the demo with Godot","text":""},{"location":"#pre-requisites","title":"Pre-requisites","text":"<ul> <li> <p>Godot Engine 4.2: The demo runs on version 4.2 of the Godot engine, which you   can download at the official website.</p> </li> <li> <p>A wallet with funds in the Cardano preview testnet: You can use any wallet you like, as   long as it supports the preview testnet. Take note of the seed-phrase of your wallet. To get test ADA (tADA), use the Cardano testnet faucet.</p> </li> <li> <p>A Blockfrost token: Our demo uses Blockfrost as a provider for querying the blockchain and submitting transactions. You will need a Blockfrost account and a preview testnet token.</p> </li> </ul>"},{"location":"#setup","title":"Setup","text":"<p>First, clone the repository and enter the top directory.</p> <pre><code>$ git clone https://github.com/mlabs-haskell/godot-cardano.git\n$ cd godot-cardano\n</code></pre> <p>Download <code>godot-cardano.zip</code> from the releases page, unzip it and copy the <code>addons</code> folder into the <code>demo</code> folder of the repo.</p> <pre><code>$ curl https://github.com/mlabs-haskell/godot-cardano/releases/download/release-.../godot-cardano.zip -O godot-cardano.zip\n$ unzip godot-cardano.zip -o demo\n</code></pre> <p>Inside the <code>demo</code> folder, create a \"preview_token.txt\" file with your Blockfrost preview token.</p> <pre><code>$ echo \"&lt;YOUR TOKEN&gt;\" &gt; demo/preview_token.txt\n</code></pre> <p>Open the Godot editor. You will be greeted by the Project Manager. Import and open the project located in the <code>demo</code> folder.</p> <p></p> <p></p> <p>You should now have the Godot editor window with the project loaded. Press the button for running the current scene (or press <code>F5</code>).</p> <p></p>"},{"location":"#how-the-demo-works","title":"How the demo works","text":"<p>The demo consists of two forms:</p> <ol> <li>A form for filling in the wallet's mnemonic phrase</li> <li>A form for transferring ADA to an arbitrary address</li> </ol> <p>The two forms must be filled in sequence.</p> <ol> <li> <p>First fill in the seed phrase of the wallet specified in the Pre-requisites section.</p> </li> <li> <p>Click on \"Set wallet\". If the wallet is loaded correctly, the demo should inform you of the amount of UTxOs found in the address associated to that wallet (as well as the amount of funds in it).</p> </li> <li> <p>Set the recipient address of the transaction (you may use the address of your wallet if you want).</p> </li> <li> <p>Fill in the amount of lovelace to send. A reminder that lovelace is the smallest unit of ADA currency: 1 ADA = 1,000,000 lovelace. You should send at least 969,750. This is the smallest value a UTxO may have in Cardano, any less will trigger a runtime error.</p> </li> <li> <p>Click on \"Send ADA\". This will use the Blockfrost backend to submit the transaction to the Cardano blockchain.</p> </li> </ol> <p></p> <p>At this point the demo is over. The demo will not inform you of the success of the transaction, but you may use any tool to confirm that a transaction occurred between your wallet and the recipient.</p> <p>For instance, here we use Cardanoscan (Preview) to monitor the wallet address and confirm that a transaction occurred:</p> <p></p>"},{"location":"#whats-next","title":"What's next?","text":"<p>Check our milestones here!</p> <p>You may also read our Proof Of Achievement / Research report written for the milestone as well. This document discusses our work and rationale for the technical decisions we have made.</p>"},{"location":"#development","title":"Development","text":"<p>Development is supported on linux. On other platforms, use a virtual machine or WSL. To get started, clone the repo and enter it.</p>"},{"location":"#setup_1","title":"Setup","text":"<p>Install Nix and enable flakes, or do it in one step with the Determinate nix installer.</p>"},{"location":"#build-asset","title":"Build Asset","text":"<pre><code>$ nix build .#godot-cardano\n</code></pre>"},{"location":"#build-and-run-demo","title":"Build and Run Demo","text":"<pre><code>$ nix build .#demo\n$ nix run .#steam-run result/bin/demo\n</code></pre>"},{"location":"#run-integration-test-on-preview-network","title":"Run Integration Test on preview network","text":"<p>Before running the tests, ensure that <code>test/preview_token.txt</code> is populated with a valid Blockfrost preview key, and that <code>test/seed_phrase.txt</code> is populated with a valid 24-word seed phrase and the address is funded with testnet ADA from the faucet. Alternatively, your seed phrase can be set via the <code>TESTNET_SEED_PHRASE</code> environment variable. The address used will be the default address in most light wallets, as well as in the demo app provided with this project. Once these are set, run the test suite:</p> <p>Run integration test on preview network.</p> <pre><code>$ nix run .#preview-integration-test\n</code></pre>"},{"location":"#development-shell","title":"Development shell","text":"<p>Enter development shell with all dependencies in PATH and addons linked. A list of useful commands is displayed.</p> <pre><code>$ nix develop\n\ud83d\udd28 Welcome to godot-cardano devshell\n\n[[general commands]]\ncardano-cli - The Cardano command-line interface\n\n...\n</code></pre> <p>Here are some useful workflows inside the development shell:</p>"},{"location":"#build-the-godot-extension","title":"Build the Godot extension","text":"<pre><code>$ cd libcsl_godot\n$ cargo build\n$ ls target/debug/libcsl_godot.so\n$ ls -la ../addons/@mlabs-haskell/godot-cardano/bin/\n</code></pre>"},{"location":"#open-the-demo-app-in-godot-editor","title":"Open the demo app in Godot editor","text":"<pre><code>$ cd demo\n$ echo \"&lt;your bockfrost preview token&gt;\" &gt; preview_token.txt\n$ godot4 --editor\n</code></pre> <p>With the <code>demo</code> or <code>test</code> project open, the Godot editor should automatically reload the gdextension after <code>cargo build</code>.</p>"},{"location":"#export-and-run-the-demo","title":"Export and run the demo","text":"<pre><code>$ cd demo\n$ godot4 --headless --export-debug  \"Linux/X11\" out/demo project.godot\n$ steam-run out/demo\n</code></pre>"},{"location":"#run-integration-tests-on-preview-network","title":"Run integration tests on preview network","text":"<pre><code>$ cd test\n$ godot4 --headless --script addons/gut/gut_cmdln.gd\n</code></pre>"},{"location":"#start-private-testnet-and-fund-wallet","title":"Start private testnet and fund wallet","text":"<pre><code>$ overmind start -D\n$ private-testnet-fund-ada\n$ echo $PRIVATE_TESTNET_PAYMENT_ADDRESS\n$ echo $PRIVATE_TESTNET_PAYMENT_VKEY\n$ echo $PRIVATE_TESTNET_PAYMENT_SKEY\n$ overmind quit\n</code></pre>"},{"location":"reference/Abstract/","title":"Abstract","text":""},{"location":"reference/Abstract/#abstract","title":"Abstract","text":"<p>Extends: RefCounted</p>"},{"location":"reference/Abstract/#description","title":"Description","text":""},{"location":"reference/Account/","title":"Account","text":""},{"location":"reference/Account/#account","title":"Account","text":""},{"location":"reference/Account/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/Account/#_init","title":"_init","text":"<pre><code>func _init(account: _Account) -&gt; Account\n</code></pre>"},{"location":"reference/AccountResource/","title":"AccountResource","text":""},{"location":"reference/AccountResource/#accountresource","title":"AccountResource","text":"<p>Extends: Resource</p>"},{"location":"reference/AccountResource/#description","title":"Description","text":""},{"location":"reference/AccountResource/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/AccountResource/#index","title":"index","text":"<pre><code>@export var index: int\n</code></pre>"},{"location":"reference/AccountResource/#name","title":"name","text":"<pre><code>@export var name: String\n</code></pre>"},{"location":"reference/AccountResource/#description_1","title":"description","text":"<pre><code>@export var description: String\n</code></pre>"},{"location":"reference/AccountResource/#public_key","title":"public_key","text":"<pre><code>@export var public_key: PackedByteArray\n</code></pre>"},{"location":"reference/Address/","title":"Address","text":""},{"location":"reference/Address/#address","title":"Address","text":"<p>Extends: RefCounted</p>"},{"location":"reference/Address/#description","title":"Description","text":""},{"location":"reference/Address/#constants-descriptions","title":"Constants Descriptions","text":""},{"location":"reference/Address/#status","title":"Status","text":"<pre><code>enum Status{SUCCESS = 0, BECH32_ERROR = 1}\n</code></pre>"},{"location":"reference/Address/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/Address/#_init","title":"_init","text":"<pre><code>func _init(address: _Address) -&gt; Address\n</code></pre>"},{"location":"reference/Address/#to_bech32","title":"to_bech32","text":"<pre><code>func to_bech32() -&gt; String\n</code></pre>"},{"location":"reference/Address/#from_bech32-static","title":"from_bech32 (static)","text":"<pre><code>func from_bech32(bech32: String) -&gt; FromBech32Result\n</code></pre>"},{"location":"reference/Address/#build-static","title":"build (static)","text":"<pre><code>func build(network_id: int, payment_cred: Credential, stake_cred: Credential = null) -&gt; Address\n</code></pre>"},{"location":"reference/Address/#sub-classes","title":"Sub-classes","text":""},{"location":"reference/Address/#tobech32result","title":"ToBech32Result","text":""},{"location":"reference/Address/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/Address/#value","title":"value","text":"<pre><code>var value: String\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result.is_ok.</p>"},{"location":"reference/Address/#error","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result._is_err.</p>"},{"location":"reference/Address/#frombech32result","title":"FromBech32Result","text":""},{"location":"reference/Address/#property-descriptions_1","title":"Property Descriptions","text":""},{"location":"reference/Address/#value_1","title":"value","text":"<pre><code>var value: Address\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result.is_ok.</p>"},{"location":"reference/Address/#error_1","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result._is_err.</p>"},{"location":"reference/AssetClass/","title":"AssetClass","text":""},{"location":"reference/AssetClass/#assetclass","title":"AssetClass","text":"<p>Extends: RefCounted</p>"},{"location":"reference/AssetClass/#description","title":"Description","text":""},{"location":"reference/AssetClass/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/AssetClass/#_init","title":"_init","text":"<pre><code>func _init(policy_id: PolicyId, asset_name: AssetName) -&gt; AssetClass\n</code></pre>"},{"location":"reference/AssetClass/#to_unit","title":"to_unit","text":"<pre><code>func to_unit() -&gt; String\n</code></pre>"},{"location":"reference/AssetClass/#from_unit-static","title":"from_unit (static)","text":"<pre><code>func from_unit(asset_unit: String) -&gt; FromUnitResult\n</code></pre>"},{"location":"reference/AssetClass/#sub-classes","title":"Sub-classes","text":""},{"location":"reference/AssetClass/#fromunitresult","title":"FromUnitResult","text":""},{"location":"reference/AssetClass/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/AssetClass/#value","title":"value","text":"<pre><code>var value: AssetClass\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on <code>tag</code> or call <code>is_ok</code>.</p>"},{"location":"reference/AssetClass/#error","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on <code>tag</code> or call <code>is_err</code>.</p>"},{"location":"reference/AssetClass/#method-descriptions_1","title":"Method Descriptions","text":""},{"location":"reference/AssetClass/#_init_1","title":"_init","text":"<pre><code>func _init(results: ArrayResult) -&gt; FromUnitResult\n</code></pre>"},{"location":"reference/AssetName/","title":"AssetName","text":""},{"location":"reference/AssetName/#assetname","title":"AssetName","text":"<p>Extends: RefCounted</p>"},{"location":"reference/AssetName/#description","title":"Description","text":""},{"location":"reference/AssetName/#constants-descriptions","title":"Constants Descriptions","text":""},{"location":"reference/AssetName/#status","title":"Status","text":"<pre><code>enum Status{SUCCESS = 0, COULD_NOT_DECODE_HEX = 1}\n</code></pre>"},{"location":"reference/AssetName/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/AssetName/#_init","title":"_init","text":"<pre><code>func _init(asset_name: _AssetName) -&gt; AssetName\n</code></pre>"},{"location":"reference/AssetName/#to_hex","title":"to_hex","text":"<pre><code>func to_hex() -&gt; String\n</code></pre>"},{"location":"reference/AssetName/#from_hex-static","title":"from_hex (static)","text":"<pre><code>func from_hex(hash: String) -&gt; FromHexResult\n</code></pre>"},{"location":"reference/AssetName/#sub-classes","title":"Sub-classes","text":""},{"location":"reference/AssetName/#fromhexresult","title":"FromHexResult","text":""},{"location":"reference/AssetName/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/AssetName/#value","title":"value","text":"<pre><code>var value: AssetName\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result.is_ok.</p>"},{"location":"reference/AssetName/#error","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result._is_err.</p>"},{"location":"reference/BigInt/","title":"BigInt","text":""},{"location":"reference/BigInt/#bigint","title":"BigInt","text":"<p>Extends: RefCounted</p>"},{"location":"reference/BigInt/#description","title":"Description","text":""},{"location":"reference/BigInt/#constants-descriptions","title":"Constants Descriptions","text":""},{"location":"reference/BigInt/#status","title":"Status","text":"<pre><code>enum Status{SUCCESS = 0, COULD_NOT_PARSE_BIGINT = 1, COULD_NOT_DESERIALIZE_BIGINT = 2}\n</code></pre>"},{"location":"reference/BigInt/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/BigInt/#_init","title":"_init","text":"<pre><code>func _init(b: _BigInt) -&gt; BigInt\n</code></pre>"},{"location":"reference/BigInt/#add","title":"add","text":"<pre><code>func add(other: BigInt) -&gt; BigInt\n</code></pre>"},{"location":"reference/BigInt/#mul","title":"mul","text":"<pre><code>func mul(other: BigInt) -&gt; BigInt\n</code></pre>"},{"location":"reference/BigInt/#eq","title":"eq","text":"<pre><code>func eq(other: BigInt) -&gt; bool\n</code></pre>"},{"location":"reference/BigInt/#lt","title":"lt","text":"<pre><code>func lt(other: BigInt) -&gt; bool\n</code></pre>"},{"location":"reference/BigInt/#gt","title":"gt","text":"<pre><code>func gt(other: BigInt) -&gt; bool\n</code></pre>"},{"location":"reference/BigInt/#negate","title":"negate","text":"<pre><code>func negate() -&gt; BigInt\n</code></pre>"},{"location":"reference/BigInt/#sub","title":"sub","text":"<pre><code>func sub(other: BigInt) -&gt; BigInt\n</code></pre>"},{"location":"reference/BigInt/#to_str","title":"to_str","text":"<pre><code>func to_str() -&gt; String\n</code></pre>"},{"location":"reference/BigInt/#to_data","title":"to_data","text":"<pre><code>func to_data(_strict: bool = false) -&gt; Variant\n</code></pre>"},{"location":"reference/BigInt/#from_str-static","title":"from_str (static)","text":"<pre><code>func from_str(s: String) -&gt; ConversionResult\n</code></pre> <p>Create a BigInt(BigInt).</p>"},{"location":"reference/BigInt/#from_int-static","title":"from_int (static)","text":"<pre><code>func from_int(n: int) -&gt; BigInt\n</code></pre> <p>Convert an [int] into a BigInt.</p>"},{"location":"reference/BigInt/#zero-static","title":"zero (static)","text":"<pre><code>func zero() -&gt; BigInt\n</code></pre>"},{"location":"reference/BigInt/#one-static","title":"one (static)","text":"<pre><code>func one() -&gt; BigInt\n</code></pre>"},{"location":"reference/BigInt/#sub-classes","title":"Sub-classes","text":""},{"location":"reference/BigInt/#conversionresult","title":"ConversionResult","text":""},{"location":"reference/BigInt/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/BigInt/#value","title":"value","text":"<pre><code>var value: BigInt\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result.is_ok.</p>"},{"location":"reference/BigInt/#error","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result._is_err.</p>"},{"location":"reference/BoolData/","title":"BoolData","text":""},{"location":"reference/BoolData/#booldata","title":"BoolData","text":"<p>Extends: RefCounted</p>"},{"location":"reference/BoolData/#description","title":"Description","text":""},{"location":"reference/BoolData/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/BoolData/#_init","title":"_init","text":"<pre><code>func _init(b: bool) -&gt; BoolData\n</code></pre>"},{"location":"reference/BoolData/#to_data","title":"to_data","text":"<pre><code>func to_data(_strict: bool = false) -&gt; Variant\n</code></pre>"},{"location":"reference/BoolData/#from_data-static","title":"from_data (static)","text":"<pre><code>func from_data(v: Variant) -&gt; BoolData\n</code></pre>"},{"location":"reference/Cbor/","title":"Cbor","text":""},{"location":"reference/Cbor/#cbor","title":"Cbor","text":"<p>Extends: RefCounted</p>"},{"location":"reference/Cbor/#description","title":"Description","text":""},{"location":"reference/Cbor/#constants-descriptions","title":"Constants Descriptions","text":""},{"location":"reference/Cbor/#status","title":"Status","text":"<pre><code>enum Status{SUCCESS = 0, DECODING_INVALID_INT = 1, DECODING_INVALID_BYTES = 2, DECODING_INVALID_CONSTR = 3, DECODING_INVALID_TAG = 4, DECODING_UNSUPPORTED_TYPE = 5, ENCODING_INVALID_TAG = 6, ENCODING_UNKNOWN_OBJECT = 7, ENCODING_UNSUPPORTED_TYPE = 8, CBOR_EVENT_ERROR = 9}\n</code></pre>"},{"location":"reference/Cbor/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/Cbor/#deserialize-static","title":"deserialize (static)","text":"<pre><code>func deserialize(bytes: PackedByteArray) -&gt; DeserializeResult\n</code></pre>"},{"location":"reference/Cbor/#serialize-static","title":"serialize (static)","text":"<pre><code>func serialize(data: Variant, strict: bool = false) -&gt; SerializeResult\n</code></pre>"},{"location":"reference/Cbor/#sub-classes","title":"Sub-classes","text":""},{"location":"reference/Cbor/#deserializeresult","title":"DeserializeResult","text":""},{"location":"reference/Cbor/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/Cbor/#value","title":"value","text":"<pre><code>var value: Variant\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result.is_ok.</p>"},{"location":"reference/Cbor/#error","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result._is_err.</p>"},{"location":"reference/Cbor/#serializeresult","title":"SerializeResult","text":""},{"location":"reference/Cbor/#property-descriptions_1","title":"Property Descriptions","text":""},{"location":"reference/Cbor/#value_1","title":"value","text":"<pre><code>var value: PackedByteArray\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result.is_ok.</p>"},{"location":"reference/Cbor/#error_1","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result._is_err.</p>"},{"location":"reference/Constr/","title":"Constr","text":""},{"location":"reference/Constr/#constr","title":"Constr","text":"<p>Extends: RefCounted</p>"},{"location":"reference/Constr/#description","title":"Description","text":""},{"location":"reference/Constr/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/Constr/#_init","title":"_init","text":"<pre><code>func _init(constructor: BigInt, fields: Array) -&gt; Constr\n</code></pre>"},{"location":"reference/Constr/#to_data","title":"to_data","text":"<pre><code>func to_data(strict: bool = false) -&gt; Variant\n</code></pre>"},{"location":"reference/CostModels/","title":"CostModels","text":""},{"location":"reference/CostModels/#costmodels","title":"CostModels","text":"<p>Extends: RefCounted</p>"},{"location":"reference/CostModels/#description","title":"Description","text":""},{"location":"reference/CostModels/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/CostModels/#_init","title":"_init","text":"<pre><code>func _init(cost_models: Dictionary) -&gt; CostModels\n</code></pre>"},{"location":"reference/CostModels/#to_ops_list","title":"to_ops_list","text":"<pre><code>func to_ops_list(model: Dictionary)\n</code></pre>"},{"location":"reference/Credential/","title":"Credential","text":""},{"location":"reference/Credential/#credential","title":"Credential","text":"<p>Extends: RefCounted</p>"},{"location":"reference/Credential/#description","title":"Description","text":""},{"location":"reference/Credential/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/Credential/#_init","title":"_init","text":"<pre><code>func _init(credential: _Credential) -&gt; Credential\n</code></pre>"},{"location":"reference/Credential/#from_script-static","title":"from_script (static)","text":"<pre><code>func from_script(script: PlutusScript) -&gt; Credential\n</code></pre>"},{"location":"reference/Credential/#from_key_hash-static","title":"from_key_hash (static)","text":"<pre><code>func from_key_hash(key_hash: PubKeyHash) -&gt; Credential\n</code></pre>"},{"location":"reference/FileDetails/","title":"FileDetails","text":""},{"location":"reference/FileDetails/#filedetails","title":"FileDetails","text":"<p>Extends: Resource</p>"},{"location":"reference/FileDetails/#description","title":"Description","text":""},{"location":"reference/FileDetails/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/FileDetails/#name","title":"name","text":"<pre><code>@export var name: String = \"\"\n</code></pre>"},{"location":"reference/FileDetails/#media_type","title":"media_type","text":"<pre><code>@export var media_type: String\n</code></pre>"},{"location":"reference/FileDetails/#src","title":"src","text":"<pre><code>@export var src: String\n</code></pre>"},{"location":"reference/FileDetails/#additional_properties","title":"additional_properties","text":"<pre><code>@export var additional_properties: Dictionary\n</code></pre>"},{"location":"reference/FileDetails/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/FileDetails/#as_dict","title":"as_dict","text":"<pre><code>func as_dict()\n</code></pre>"},{"location":"reference/MintCip68Pair/","title":"MintCip68Pair","text":""},{"location":"reference/MintCip68Pair/#mintcip68pair","title":"MintCip68Pair","text":"<p>Extends: Resource</p>"},{"location":"reference/MintCip68Pair/#description","title":"Description","text":""},{"location":"reference/MintCip68Pair/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/MintCip68Pair/#token_name","title":"token_name","text":"<pre><code>@export var token_name: PackedByteArray\n</code></pre> <ul> <li>Setter: <code>@token_name_setter</code></li> </ul>"},{"location":"reference/MintCip68Pair/#token_name_as_hex","title":"token_name_as_hex","text":"<pre><code>@export var token_name_as_hex: String\n</code></pre> <ul> <li>Setter: <code>@token_name_as_hex_setter</code></li> <li>Getter: <code>@token_name_as_hex_getter</code></li> </ul>"},{"location":"reference/MintCip68Pair/#token_name_as_utf8","title":"token_name_as_utf8","text":"<pre><code>@export var token_name_as_utf8: String\n</code></pre> <ul> <li>Setter: <code>@token_name_as_utf8_setter</code></li> <li>Getter: <code>@token_name_as_utf8_getter</code></li> </ul>"},{"location":"reference/MintCip68Pair/#name","title":"name","text":"<pre><code>@export var name: String\n</code></pre>"},{"location":"reference/MintCip68Pair/#image","title":"image","text":"<pre><code>@export var image: String\n</code></pre>"},{"location":"reference/MintCip68Pair/#media_type","title":"media_type","text":"<pre><code>@export var media_type: String = \"image/webp\"\n</code></pre>"},{"location":"reference/MintCip68Pair/#description_1","title":"description","text":"<pre><code>@export var description: String = \"\"\n</code></pre>"},{"location":"reference/MintCip68Pair/#file_details","title":"file_details","text":"<pre><code>@export var file_details: Array[FileDetails]\n</code></pre>"},{"location":"reference/MintCip68Pair/#non_standard_metadata","title":"non_standard_metadata","text":"<pre><code>@export var non_standard_metadata: Dictionary\n</code></pre> <ul> <li>Setter: <code>@non_standard_metadata_setter</code></li> </ul>"},{"location":"reference/MintCip68Pair/#extra_plutus_data","title":"extra_plutus_data","text":"<pre><code>@export var extra_plutus_data: Dictionary\n</code></pre> <ul> <li>Setter: <code>@extra_plutus_data_setter</code></li> </ul>"},{"location":"reference/MintCip68Pair/#big_int_script","title":"big_int_script","text":"<pre><code>var big_int_script: Script = \"&lt;GDScript#-9223370966216679568&gt;\"\n</code></pre>"},{"location":"reference/MintCip68Pair/#file_details_script","title":"file_details_script","text":"<pre><code>var file_details_script: Script = \"&lt;GDScript#-9223370965881135244&gt;\"\n</code></pre>"},{"location":"reference/MintCip68Pair/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/MintCip68Pair/#get_user_token_name","title":"get_user_token_name","text":"<pre><code>func get_user_token_name() -&gt; PackedByteArray\n</code></pre>"},{"location":"reference/MintCip68Pair/#get_ref_token_name","title":"get_ref_token_name","text":"<pre><code>func get_ref_token_name() -&gt; PackedByteArray\n</code></pre>"},{"location":"reference/MintCip68Pair/#to_data","title":"to_data","text":"<pre><code>func to_data(_strict: bool) -&gt; Variant\n</code></pre> <p>The flag only applies for serializing the [member MintCip68Pair.extra_plutus_data]. The CIP25 metadata follows its own rules.</p>"},{"location":"reference/MultiAsset/","title":"MultiAsset","text":""},{"location":"reference/MultiAsset/#multiasset","title":"MultiAsset","text":"<p>Extends: RefCounted</p>"},{"location":"reference/MultiAsset/#description","title":"Description","text":""},{"location":"reference/MultiAsset/#constants-descriptions","title":"Constants Descriptions","text":""},{"location":"reference/MultiAsset/#status","title":"Status","text":"<pre><code>enum Status{SUCCESS = 0, COULD_NOT_EXTRACT_POLICY_ID = 1, COULD_NOT_EXTRACT_ASSET_NAME = 2, COULD_NOT_DECODE_HEX = 3, INVALID_ASSET_NAME = 4, OTHER_ERROR = 5}\n</code></pre>"},{"location":"reference/MultiAsset/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/MultiAsset/#_init","title":"_init","text":"<pre><code>func _init(multi_asset: _MultiAsset) -&gt; MultiAsset\n</code></pre>"},{"location":"reference/MultiAsset/#quantity_of_asset","title":"quantity_of_asset","text":"<pre><code>func quantity_of_asset(asset: AssetClass) -&gt; BigInt\n</code></pre>"},{"location":"reference/MultiAsset/#set_asset_quantity","title":"set_asset_quantity","text":"<pre><code>func set_asset_quantity(asset: AssetClass, quantity: BigInt) -&gt; Result\n</code></pre>"},{"location":"reference/MultiAsset/#to_dictionary","title":"to_dictionary","text":"<pre><code>func to_dictionary() -&gt; Dictionary\n</code></pre>"},{"location":"reference/MultiAsset/#from_dictionary-static","title":"from_dictionary (static)","text":"<pre><code>func from_dictionary(assets: Dictionary) -&gt; FromDictionaryResult\n</code></pre>"},{"location":"reference/MultiAsset/#empty-static","title":"empty (static)","text":"<pre><code>func empty() -&gt; MultiAsset\n</code></pre>"},{"location":"reference/MultiAsset/#sub-classes","title":"Sub-classes","text":""},{"location":"reference/MultiAsset/#fromdictionaryresult","title":"FromDictionaryResult","text":""},{"location":"reference/MultiAsset/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/MultiAsset/#value","title":"value","text":"<pre><code>var value: MultiAsset\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result.is_ok.</p>"},{"location":"reference/MultiAsset/#error","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result._is_err.</p>"},{"location":"reference/PlutusData/","title":"PlutusData","text":""},{"location":"reference/PlutusData/#plutusdata","title":"PlutusData","text":"<p>Extends: RefCounted</p>"},{"location":"reference/PlutusData/#description","title":"Description","text":""},{"location":"reference/PlutusData/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/PlutusData/#unwrap-static","title":"unwrap (static)","text":"<pre><code>func unwrap(v: Variant, strict: bool = false) -&gt; Variant\n</code></pre> <p>Recursively unwraps Objects to native data types</p>"},{"location":"reference/PlutusData/#wrap-static","title":"wrap (static)","text":"<pre><code>func wrap(v: Variant) -&gt; Variant\n</code></pre> <p>Recursively wraps native data types to GDScript types</p>"},{"location":"reference/PlutusData/#serialize-static","title":"serialize (static)","text":"<pre><code>func serialize(v: Variant, strict: bool = true) -&gt; SerializeResult\n</code></pre>"},{"location":"reference/PlutusData/#deserialize-static","title":"deserialize (static)","text":"<pre><code>func deserialize(bytes: PackedByteArray) -&gt; DeserializeResult\n</code></pre>"},{"location":"reference/PlutusData/#from_json-static","title":"from_json (static)","text":"<pre><code>func from_json(json: Dictionary) -&gt; Variant\n</code></pre>"},{"location":"reference/PolicyId/","title":"PolicyId","text":""},{"location":"reference/PolicyId/#policyid","title":"PolicyId","text":"<p>Extends: RefCounted</p>"},{"location":"reference/PolicyId/#description","title":"Description","text":""},{"location":"reference/PolicyId/#constants-descriptions","title":"Constants Descriptions","text":""},{"location":"reference/PolicyId/#status","title":"Status","text":"<pre><code>enum Status{SUCCESS = 0, COULD_NOT_DECODE_HEX = 1}\n</code></pre>"},{"location":"reference/PolicyId/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/PolicyId/#_init","title":"_init","text":"<pre><code>func _init(policy_id: _PolicyId) -&gt; PolicyId\n</code></pre>"},{"location":"reference/PolicyId/#to_hex","title":"to_hex","text":"<pre><code>func to_hex() -&gt; String\n</code></pre>"},{"location":"reference/PolicyId/#from_hex-static","title":"from_hex (static)","text":"<pre><code>func from_hex(hash: String) -&gt; FromHexResult\n</code></pre>"},{"location":"reference/PolicyId/#sub-classes","title":"Sub-classes","text":""},{"location":"reference/PolicyId/#fromhexresult","title":"FromHexResult","text":""},{"location":"reference/PolicyId/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/PolicyId/#value","title":"value","text":"<pre><code>var value: PolicyId\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result.is_ok.</p>"},{"location":"reference/PolicyId/#error","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result._is_err.</p>"},{"location":"reference/PubKeyHash/","title":"PubKeyHash","text":""},{"location":"reference/PubKeyHash/#pubkeyhash","title":"PubKeyHash","text":"<p>Extends: RefCounted</p>"},{"location":"reference/PubKeyHash/#description","title":"Description","text":""},{"location":"reference/PubKeyHash/#constants-descriptions","title":"Constants Descriptions","text":""},{"location":"reference/PubKeyHash/#status","title":"Status","text":"<pre><code>enum Status{SUCCESS = 0, FROM_HEX_ERROR = 1}\n</code></pre>"},{"location":"reference/PubKeyHash/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/PubKeyHash/#_init","title":"_init","text":"<pre><code>func _init(pub_key_hash: _PubKeyHash) -&gt; PubKeyHash\n</code></pre>"},{"location":"reference/PubKeyHash/#to_hex","title":"to_hex","text":"<pre><code>func to_hex() -&gt; String\n</code></pre>"},{"location":"reference/PubKeyHash/#from_hex-static","title":"from_hex (static)","text":"<pre><code>func from_hex(hash: String) -&gt; FromHexResult\n</code></pre>"},{"location":"reference/PubKeyHash/#sub-classes","title":"Sub-classes","text":""},{"location":"reference/PubKeyHash/#fromhexresult","title":"FromHexResult","text":""},{"location":"reference/PubKeyHash/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/PubKeyHash/#value","title":"value","text":"<pre><code>var value: PubKeyHash\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result.is_ok.</p>"},{"location":"reference/PubKeyHash/#error","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result._is_err.</p>"},{"location":"reference/Result/","title":"Result","text":""},{"location":"reference/Result/#result","title":"Result","text":"<p>Extends: RefCounted</p>"},{"location":"reference/Result/#description","title":"Description","text":""},{"location":"reference/Result/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/Result/#_init","title":"_init","text":"<pre><code>func _init(res: _Result) -&gt; Result\n</code></pre>"},{"location":"reference/Result/#is_ok","title":"is_ok","text":"<pre><code>func is_ok() -&gt; bool\n</code></pre> <p>Returns true if the operation succeeded</p>"},{"location":"reference/Result/#is_err","title":"is_err","text":"<pre><code>func is_err() -&gt; bool\n</code></pre> <p>Returns true if the operation failed</p>"},{"location":"reference/Result/#tag","title":"tag","text":"<pre><code>func tag() -&gt; int\n</code></pre> <p>Returns a tag representing the status of the operation. This can be used in pattern matching.   Consult the [Status] enum of the class.</p>"},{"location":"reference/Result/#sequence-static","title":"sequence (static)","text":"<pre><code>func sequence(results: Array[Result]) -&gt; ArrayResult\n</code></pre>"},{"location":"reference/Result/#sub-classes","title":"Sub-classes","text":""},{"location":"reference/Result/#ok","title":"Ok","text":""},{"location":"reference/Result/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/Result/#value","title":"value","text":"<pre><code>var value: Variant\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul>"},{"location":"reference/Result/#method-descriptions_1","title":"Method Descriptions","text":""},{"location":"reference/Result/#_init_1","title":"_init","text":"<pre><code>func _init(value: Variant) -&gt; Ok\n</code></pre>"},{"location":"reference/Result/#err","title":"Err","text":""},{"location":"reference/Result/#property-descriptions_1","title":"Property Descriptions","text":""},{"location":"reference/Result/#error","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul>"},{"location":"reference/Result/#method-descriptions_2","title":"Method Descriptions","text":""},{"location":"reference/Result/#_init_2","title":"_init","text":"<pre><code>func _init(err: String, tag: int) -&gt; Err\n</code></pre>"},{"location":"reference/Result/#variantresult","title":"VariantResult","text":""},{"location":"reference/Result/#property-descriptions_2","title":"Property Descriptions","text":""},{"location":"reference/Result/#value_1","title":"value","text":"<pre><code>var value: Variant\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result.is_ok.</p>"},{"location":"reference/Result/#error_1","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result._is_err.</p>"},{"location":"reference/Result/#arrayresult","title":"ArrayResult","text":""},{"location":"reference/Result/#property-descriptions_3","title":"Property Descriptions","text":""},{"location":"reference/Result/#value_2","title":"value","text":"<pre><code>var value: Array\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result.is_ok.</p>"},{"location":"reference/Result/#error_2","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result._is_err.</p>"},{"location":"reference/SingleAddressWallet/","title":"SingleAddressWallet","text":""},{"location":"reference/SingleAddressWallet/#singleaddresswallet","title":"SingleAddressWallet","text":"<p>Extends: RefCounted</p>"},{"location":"reference/SingleAddressWallet/#description","title":"Description","text":""},{"location":"reference/SingleAddressWallet/#constants-descriptions","title":"Constants Descriptions","text":""},{"location":"reference/SingleAddressWallet/#status","title":"Status","text":"<pre><code>enum Status{SUCCESS = 0, DECRYPTION_ERROR = 1, BAD_DECRYPTED_KEY = 2, BECH32_ERROR = 3, NON_EXISTENT_ACCOUNT = 4}\n</code></pre>"},{"location":"reference/SingleAddressWallet/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/SingleAddressWallet/#_init","title":"_init","text":"<pre><code>func _init(wallet: _SingleAddressWallet, wallet_loader: SingleAddressWalletLoader) -&gt; SingleAddressWallet\n</code></pre>"},{"location":"reference/SingleAddressWallet/#get_address","title":"get_address","text":"<pre><code>func get_address() -&gt; Address\n</code></pre> <p>Get the account's Address(Address)</p>"},{"location":"reference/SingleAddressWallet/#get_address_bech32","title":"get_address_bech32","text":"<pre><code>func get_address_bech32() -&gt; String\n</code></pre> <p>Get the account's address as a BECH32-encoded [String].</p>"},{"location":"reference/SingleAddressWallet/#add_account","title":"add_account","text":"<pre><code>func add_account(account_index: int, password: String) -&gt; AddAccountResult\n</code></pre> <p>Adds an account to this wallet with the given index</p>"},{"location":"reference/SingleAddressWallet/#switch_account","title":"switch_account","text":"<pre><code>func switch_account(account: Account) -&gt; int\n</code></pre> <p>Switch to the account with the given <code>account_index</code>. It may fail if no such account exists. It returns the account index when it succeeds.</p>"},{"location":"reference/SingleAddressWallet/#accounts","title":"accounts","text":"<pre><code>func accounts() -&gt; Array[Account]\n</code></pre> <p>Return a list of accounts currently available in the wallet</p>"},{"location":"reference/SingleAddressWallet/#export","title":"export","text":"<pre><code>func export() -&gt; SingleAddressWalletResource\n</code></pre> <p>Export wallet to a resource.</p>"},{"location":"reference/SingleAddressWallet/#sub-classes","title":"Sub-classes","text":""},{"location":"reference/SingleAddressWallet/#addaccountresult","title":"AddAccountResult","text":""},{"location":"reference/SingleAddressWallet/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/SingleAddressWallet/#value","title":"value","text":"<pre><code>var value: Account\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result.is_ok.</p>"},{"location":"reference/SingleAddressWallet/#error","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result._is_err.</p>"},{"location":"reference/SingleAddressWalletResource/","title":"SingleAddressWalletResource","text":""},{"location":"reference/SingleAddressWalletResource/#singleaddresswalletresource","title":"SingleAddressWalletResource","text":"<p>Extends: Resource</p>"},{"location":"reference/SingleAddressWalletResource/#description","title":"Description","text":""},{"location":"reference/SingleAddressWalletResource/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/SingleAddressWalletResource/#encrypted_master_private_key","title":"encrypted_master_private_key","text":"<pre><code>@export var encrypted_master_private_key: PackedByteArray\n</code></pre>"},{"location":"reference/SingleAddressWalletResource/#accounts","title":"accounts","text":"<pre><code>@export var accounts: Array[AccountResource]\n</code></pre>"},{"location":"reference/SingleAddressWalletResource/#scrypt_salt","title":"scrypt_salt","text":"<pre><code>@export var scrypt_salt: PackedByteArray\n</code></pre>"},{"location":"reference/SingleAddressWalletResource/#scrypt_log_n","title":"scrypt_log_n","text":"<pre><code>@export var scrypt_log_n: int\n</code></pre>"},{"location":"reference/SingleAddressWalletResource/#scrypt_r","title":"scrypt_r","text":"<pre><code>@export var scrypt_r: int\n</code></pre>"},{"location":"reference/SingleAddressWalletResource/#scrypt_p","title":"scrypt_p","text":"<pre><code>@export var scrypt_p: int\n</code></pre>"},{"location":"reference/SingleAddressWalletResource/#aes_iv","title":"aes_iv","text":"<pre><code>@export var aes_iv: PackedByteArray\n</code></pre>"},{"location":"reference/SingleAddressWalletResource/#salt","title":"salt","text":"<pre><code>@export var salt: PackedByteArray\n</code></pre>"},{"location":"reference/Transaction/","title":"Transaction","text":""},{"location":"reference/Transaction/#transaction","title":"Transaction","text":"<p>Extends: RefCounted</p>"},{"location":"reference/Transaction/#description","title":"Description","text":""},{"location":"reference/Transaction/#constants-descriptions","title":"Constants Descriptions","text":""},{"location":"reference/Transaction/#transactionstatus","title":"TransactionStatus","text":"<pre><code>enum TransactionStatus{SUCCESS = 0, EVALUATION_ERROR = 1, DESERIALIZE_ERROR = 2}\n</code></pre>"},{"location":"reference/Transaction/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/Transaction/#_init","title":"_init","text":"<pre><code>func _init(tx: _Transaction) -&gt; Transaction\n</code></pre>"},{"location":"reference/Transaction/#bytes","title":"bytes","text":"<pre><code>func bytes() -&gt; PackedByteArray\n</code></pre>"},{"location":"reference/Transaction/#add_signature","title":"add_signature","text":"<pre><code>func add_signature(signature: Signature) -&gt; void\n</code></pre>"},{"location":"reference/Transaction/#evaluate","title":"evaluate","text":"<pre><code>func evaluate(utxos: Array[Utxo]) -&gt; EvaluationResult\n</code></pre>"},{"location":"reference/Transaction/#hash","title":"hash","text":"<pre><code>func hash() -&gt; TransactionHash\n</code></pre>"},{"location":"reference/Transaction/#sub-classes","title":"Sub-classes","text":""},{"location":"reference/Transaction/#evaluationresult","title":"EvaluationResult","text":""},{"location":"reference/Transaction/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/Transaction/#value","title":"value","text":"<pre><code>var value: _EvaluationResult\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on <code>tag</code> or call <code>is_ok</code>.</p>"},{"location":"reference/Transaction/#error","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on <code>tag</code> or call <code>is_err</code>.</p>"},{"location":"reference/TransactionHash/","title":"TransactionHash","text":""},{"location":"reference/TransactionHash/#transactionhash","title":"TransactionHash","text":"<p>Extends: RefCounted</p>"},{"location":"reference/TransactionHash/#description","title":"Description","text":""},{"location":"reference/TransactionHash/#constants-descriptions","title":"Constants Descriptions","text":""},{"location":"reference/TransactionHash/#status","title":"Status","text":"<pre><code>enum Status{SUCCESS = 0, INVALID_HASH = 1}\n</code></pre>"},{"location":"reference/TransactionHash/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/TransactionHash/#_init","title":"_init","text":"<pre><code>func _init(transaction_hash: _TransactionHash) -&gt; TransactionHash\n</code></pre>"},{"location":"reference/TransactionHash/#to_hex","title":"to_hex","text":"<pre><code>func to_hex() -&gt; String\n</code></pre>"},{"location":"reference/TransactionHash/#from_hex-static","title":"from_hex (static)","text":"<pre><code>func from_hex(hash: String) -&gt; FromHexResult\n</code></pre>"},{"location":"reference/TransactionHash/#sub-classes","title":"Sub-classes","text":""},{"location":"reference/TransactionHash/#fromhexresult","title":"FromHexResult","text":""},{"location":"reference/TransactionHash/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/TransactionHash/#value","title":"value","text":"<pre><code>var value: TransactionHash\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result.is_ok.</p>"},{"location":"reference/TransactionHash/#error","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result._is_err.</p>"},{"location":"reference/TxBuilder/","title":"TxBuilder","text":""},{"location":"reference/TxBuilder/#txbuilder","title":"TxBuilder","text":"<p>Extends: RefCounted</p>"},{"location":"reference/TxBuilder/#description","title":"Description","text":""},{"location":"reference/TxBuilder/#constants-descriptions","title":"Constants Descriptions","text":""},{"location":"reference/TxBuilder/#txbuilderstatus","title":"TxBuilderStatus","text":"<pre><code>enum TxBuilderStatus{SUCCESS = 0, BAD_PROTOCOL_PARAMETERS = 1, QUANTITY_EXCEEDS_MAXIMUM = 2, DESERIALIZE_ERROR = 3, BYRON_ADDRESS_UNSUPPORTED = 4, COULD_NOT_GET_KEY_HASH = 5, UNKNOWN_REDEEMER_INDEX = 6, UNEXPECTED_COLLATERAL_AMOUNT = 7, OTHER_ERROR = 8, CREATE_ERROR = 9, INVALID_DATA = 10, NO_UTXOS = 11, NO_CHANGE_ADDRESS = 12, COMPLETE_ERROR = 13}\n</code></pre>"},{"location":"reference/TxBuilder/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/TxBuilder/#_init","title":"_init","text":"<pre><code>func _init(provider: Provider, builder: _TxBuilder) -&gt; TxBuilder\n</code></pre>"},{"location":"reference/TxBuilder/#set_slot_config","title":"set_slot_config","text":"<pre><code>func set_slot_config(start_time: int, start_slot: int, slot_length: int) -&gt; TxBuilder\n</code></pre>"},{"location":"reference/TxBuilder/#set_cost_models","title":"set_cost_models","text":"<pre><code>func set_cost_models(cost_models: CostModels) -&gt; TxBuilder\n</code></pre>"},{"location":"reference/TxBuilder/#pay_to_address","title":"pay_to_address","text":"<pre><code>func pay_to_address(address: Address, coin: BigInt, assets: MultiAsset) -&gt; TxBuilder\n</code></pre>"},{"location":"reference/TxBuilder/#pay_to_address_with_datum","title":"pay_to_address_with_datum","text":"<pre><code>func pay_to_address_with_datum(address: Address, coin: BigInt, assets: MultiAsset, datum: Variant) -&gt; TxBuilder\n</code></pre>"},{"location":"reference/TxBuilder/#pay_to_address_with_datum_hash","title":"pay_to_address_with_datum_hash","text":"<pre><code>func pay_to_address_with_datum_hash(address: Address, coin: BigInt, assets: MultiAsset, datum: Variant) -&gt; TxBuilder\n</code></pre>"},{"location":"reference/TxBuilder/#mint_assets","title":"mint_assets","text":"<pre><code>func mint_assets(minting_policy: PlutusScript, tokens: Array[MintToken], redeemer: Variant) -&gt; TxBuilder\n</code></pre>"},{"location":"reference/TxBuilder/#mint_cip68_pair","title":"mint_cip68_pair","text":"<pre><code>func mint_cip68_pair(minting_policy: PlutusScript, redeemer: Variant, conf: MintCip68Pair) -&gt; TxBuilder\n</code></pre>"},{"location":"reference/TxBuilder/#collect_from","title":"collect_from","text":"<pre><code>func collect_from(utxos: Array[Utxo]) -&gt; TxBuilder\n</code></pre>"},{"location":"reference/TxBuilder/#collect_from_script","title":"collect_from_script","text":"<pre><code>func collect_from_script(plutus_script_source: PlutusScriptSource, utxos: Array[Utxo], redeemer: Variant) -&gt; TxBuilder\n</code></pre>"},{"location":"reference/TxBuilder/#set_change_address","title":"set_change_address","text":"<pre><code>func set_change_address(change_address: Address) -&gt; TxBuilder\n</code></pre>"},{"location":"reference/TxBuilder/#set_wallet","title":"set_wallet","text":"<pre><code>func set_wallet(wallet: Wallet) -&gt; TxBuilder\n</code></pre>"},{"location":"reference/TxBuilder/#valid_after","title":"valid_after","text":"<pre><code>func valid_after(time: int) -&gt; TxBuilder\n</code></pre> <p>Set the time in POSIX seconds after which the transaction is valid</p>"},{"location":"reference/TxBuilder/#valid_before","title":"valid_before","text":"<pre><code>func valid_before(time: int) -&gt; TxBuilder\n</code></pre> <p>Set the time in POSIX seconds before which the transaction is valid</p>"},{"location":"reference/TxBuilder/#add_required_signer","title":"add_required_signer","text":"<pre><code>func add_required_signer(pub_key_hash: PubKeyHash) -&gt; TxBuilder\n</code></pre>"},{"location":"reference/TxBuilder/#add_reference_input","title":"add_reference_input","text":"<pre><code>func add_reference_input(utxo: Utxo) -&gt; TxBuilder\n</code></pre>"},{"location":"reference/TxBuilder/#balance","title":"balance","text":"<pre><code>func balance(utxos: Array[Utxo] = null) -&gt; BalanceResult\n</code></pre> <p>Only balance the transaction and return the result. The resulting transaction will not have been evaluated and will have inaccurate script execution units, which may cause the transaction to fail at submission and potentially consume the provided collateral.</p>"},{"location":"reference/TxBuilder/#complete","title":"complete","text":"<pre><code>func complete(utxos: Array[Utxo] = null) -&gt; CompleteResult\n</code></pre>"},{"location":"reference/TxBuilder/#create-static","title":"create (static)","text":"<pre><code>func create(provider: Provider) -&gt; CreateResult\n</code></pre> <p>Create a TxBuilder object from a Provider. This action may fail.</p>"},{"location":"reference/TxBuilder/#sub-classes","title":"Sub-classes","text":""},{"location":"reference/TxBuilder/#createresult","title":"CreateResult","text":""},{"location":"reference/TxBuilder/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/TxBuilder/#value","title":"value","text":"<pre><code>var value: TxBuilder\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on <code>tag</code> or call <code>is_ok</code>.</p>"},{"location":"reference/TxBuilder/#error","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on <code>tag</code> or call <code>is_err</code>.</p>"},{"location":"reference/TxBuilder/#method-descriptions_1","title":"Method Descriptions","text":""},{"location":"reference/TxBuilder/#_init_1","title":"_init","text":"<pre><code>func _init(provider: Provider, res: _Result) -&gt; CreateResult\n</code></pre>"},{"location":"reference/TxBuilder/#balanceresult","title":"BalanceResult","text":""},{"location":"reference/TxBuilder/#property-descriptions_1","title":"Property Descriptions","text":""},{"location":"reference/TxBuilder/#value_1","title":"value","text":"<pre><code>var value: Transaction\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on <code>tag</code> or call <code>is_ok</code>.</p>"},{"location":"reference/TxBuilder/#error_1","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on <code>tag</code> or call <code>is_err</code>.</p>"},{"location":"reference/TxBuilder/#method-descriptions_2","title":"Method Descriptions","text":""},{"location":"reference/TxBuilder/#_init_2","title":"_init","text":"<pre><code>func _init(res: _Result) -&gt; BalanceResult\n</code></pre>"},{"location":"reference/TxBuilder/#completeresult","title":"CompleteResult","text":""},{"location":"reference/TxBuilder/#property-descriptions_2","title":"Property Descriptions","text":""},{"location":"reference/TxBuilder/#value_2","title":"value","text":"<pre><code>var value: TxComplete\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on <code>tag</code> or call <code>is_ok</code>.</p>"},{"location":"reference/TxBuilder/#error_2","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on <code>tag</code> or call <code>is_err</code>.</p>"},{"location":"reference/TxBuilder/#method-descriptions_3","title":"Method Descriptions","text":""},{"location":"reference/TxBuilder/#_init_3","title":"_init","text":"<pre><code>func _init(provider: Provider, res: _Result, wallet: Wallet = null) -&gt; CompleteResult\n</code></pre>"},{"location":"reference/TxBuilder/#minttoken","title":"MintToken","text":""},{"location":"reference/TxBuilder/#method-descriptions_4","title":"Method Descriptions","text":""},{"location":"reference/TxBuilder/#_init_4","title":"_init","text":"<pre><code>func _init(token_name: PackedByteArray, quantity: BigInt) -&gt; MintToken\n</code></pre>"},{"location":"reference/Utxo/","title":"Utxo","text":""},{"location":"reference/Utxo/#utxo","title":"Utxo","text":"<p>Extends: RefCounted</p>"},{"location":"reference/Utxo/#description","title":"Description","text":""},{"location":"reference/Utxo/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/Utxo/#tx_hash","title":"tx_hash","text":"<pre><code>func tx_hash() -&gt; TransactionHash\n</code></pre>"},{"location":"reference/Utxo/#datum_info","title":"datum_info","text":"<pre><code>func datum_info() -&gt; UtxoDatumInfo\n</code></pre>"},{"location":"reference/Utxo/#output_index","title":"output_index","text":"<pre><code>func output_index() -&gt; int\n</code></pre>"},{"location":"reference/Utxo/#address","title":"address","text":"<pre><code>func address() -&gt; Address\n</code></pre>"},{"location":"reference/Utxo/#coin","title":"coin","text":"<pre><code>func coin() -&gt; BigInt\n</code></pre>"},{"location":"reference/Utxo/#assets","title":"assets","text":"<pre><code>func assets() -&gt; MultiAsset\n</code></pre>"},{"location":"reference/Utxo/#_init","title":"_init","text":"<pre><code>func _init(utxo: _Utxo) -&gt; Utxo\n</code></pre>"},{"location":"reference/Utxo/#create-static","title":"create (static)","text":"<pre><code>func create(tx_hash: String, output_index: int, address: String, coin: String, assets: Dictionary, datum_info: UtxoDatumInfo) -&gt; CreateResult\n</code></pre>"},{"location":"reference/Utxo/#sub-classes","title":"Sub-classes","text":""},{"location":"reference/Utxo/#createresult","title":"CreateResult","text":""},{"location":"reference/Utxo/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/Utxo/#value","title":"value","text":"<pre><code>var value: Utxo\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on <code>tag</code> or call <code>is_ok</code>.</p>"},{"location":"reference/Utxo/#error","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on <code>tag</code> or call <code>is_err</code>.</p>"},{"location":"reference/Utxo/#method-descriptions_1","title":"Method Descriptions","text":""},{"location":"reference/Utxo/#_init_1","title":"_init","text":"<pre><code>func _init(results: ArrayResult) -&gt; CreateResult\n</code></pre>"},{"location":"reference/VoidData/","title":"VoidData","text":""},{"location":"reference/VoidData/#voiddata","title":"VoidData","text":"<p>Extends: RefCounted</p>"},{"location":"reference/VoidData/#description","title":"Description","text":""},{"location":"reference/VoidData/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/VoidData/#to_data","title":"to_data","text":"<pre><code>func to_data(_strict: bool = false) -&gt; Variant\n</code></pre>"},{"location":"reference/VoidData/#from_data-static","title":"from_data (static)","text":"<pre><code>func from_data(v: Variant) -&gt; VoidData\n</code></pre>"},{"location":"reference/Wallet/","title":"Wallet","text":""},{"location":"reference/Wallet/#wallet","title":"Wallet","text":"<p>Extends: Node</p>"},{"location":"reference/Wallet/#description","title":"Description","text":""},{"location":"reference/Wallet/#property-descriptions","title":"Property Descriptions","text":""},{"location":"reference/Wallet/#active","title":"active","text":"<pre><code>var active: bool = false\n</code></pre>"},{"location":"reference/Wallet/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/Wallet/#total_lovelace","title":"total_lovelace","text":"<pre><code>func total_lovelace() -&gt; BigInt\n</code></pre>"},{"location":"reference/Wallet/#new_tx","title":"new_tx","text":"<pre><code>func new_tx() -&gt; CreateResult\n</code></pre>"},{"location":"reference/Wallet/#signals","title":"Signals","text":"<ul> <li>signal got_updated_utxos(utxos): </li> </ul>"},{"location":"reference/Wallet/#sub-classes","title":"Sub-classes","text":""},{"location":"reference/Wallet/#signtxresult","title":"SignTxResult","text":""},{"location":"reference/Wallet/#property-descriptions_1","title":"Property Descriptions","text":""},{"location":"reference/Wallet/#value","title":"value","text":"<pre><code>var value: Signature\n</code></pre> <ul> <li>Getter: <code>@value_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result.is_ok.</p>"},{"location":"reference/Wallet/#error","title":"error","text":"<pre><code>var error: String\n</code></pre> <ul> <li>Getter: <code>@error_getter</code></li> </ul> <p>WARNING: This function may fail! First match on Result.tag or call Result._is_err.</p>"},{"location":"reference/Wallet/#mnemonicwallet","title":"MnemonicWallet","text":""},{"location":"reference/Wallet/#property-descriptions_2","title":"Property Descriptions","text":""},{"location":"reference/Wallet/#utxos_update_age","title":"utxos_update_age","text":"<pre><code>@export var utxos_update_age: float = 30\n</code></pre>"},{"location":"reference/Wallet/#utxos_cache_age","title":"utxos_cache_age","text":"<pre><code>@export var utxos_cache_age: float = 30\n</code></pre>"},{"location":"reference/Wallet/#time_left","title":"time_left","text":"<pre><code>var time_left: float\n</code></pre> <ul> <li>Getter: <code>@time_left_getter</code></li> </ul>"},{"location":"reference/Wallet/#timer","title":"timer","text":"<pre><code>var timer: Timer\n</code></pre>"},{"location":"reference/Wallet/#utxos","title":"utxos","text":"<pre><code>var utxos: Array[Utxo]\n</code></pre> <p>Cached utxos, these can and will be outdated. To get the latest utxos, call MnemonicWallet.get_utxos.</p>"},{"location":"reference/Wallet/#method-descriptions_1","title":"Method Descriptions","text":""},{"location":"reference/Wallet/#_init","title":"_init","text":"<pre><code>func _init(single_address_wallet: SingleAddressWallet, provider: Provider, auto_update_utxos: bool = true) -&gt; MnemonicWallet\n</code></pre>"},{"location":"reference/Wallet/#update_utxos","title":"update_utxos","text":"<pre><code>func update_utxos() -&gt; void\n</code></pre> <p>Update the cached utxos. The same as MnemonicWallet.get_utxos, but without returning the updated utxos.</p>"},{"location":"reference/Wallet/#add_account","title":"add_account","text":"<pre><code>func add_account(account_index: int, password: String) -&gt; AddAccountResult\n</code></pre>"},{"location":"reference/Wallet/#switch_account","title":"switch_account","text":"<pre><code>func switch_account(account: Account) -&gt; int\n</code></pre>"},{"location":"reference/Wallet/#send_lovelace_to","title":"send_lovelace_to","text":"<pre><code>func send_lovelace_to(password: String, recipient: String, amount: BigInt) -&gt; void\n</code></pre>"}]}